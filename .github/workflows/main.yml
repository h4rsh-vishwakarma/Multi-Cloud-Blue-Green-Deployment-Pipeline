name: Multi-Cloud CI/CD Pipeline

# यह पाइपलाइन कब चलेगी? जब 'main' ब्रांच में कोड push होगा
on:
  push:
    branches: [ main ]

jobs:
  # पहला जॉब: Docker इमेज बनाना और उसे Docker Hub पर भेजना
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # स्टेप 1: कोड को डाउनलोड करना
      - name: Checkout code
        uses: actions/checkout@v3

      # स्टेप 2: Docker Hub में लॉग इन करना
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # स्टेप 3: Docker इमेज बनाना और उसे Docker Hub पर भेजना
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./app
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-flask-app:${{ github.sha }}

  # दूसरा जॉब: क्लाउड पर डिप्लॉय करना
  deploy:
    # यह जॉब 'build-and-push' के बाद ही चलेगा
    needs: build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cloud: [aws, gcp] # यह जॉब दो बार चलेगा, एक AWS के लिए और एक GCP के लिए

    steps:
      # स्टेप 1: कोड को फिर से डाउनलोड करना
      - name: Checkout code
        uses: actions/checkout@v3

      # स्टेप 2: तय करना कि Blue में डिप्लॉय करें या Green में
      - name: Determine Target Environment
        id: bluegreen
        run: |
          # यह एक आसान तरीका है, हम हर दूसरे commit पर रंग बदलते हैं
          if [ $(( $(git rev-parse --short HEAD | tr -d 'a-f') % 2 )) -eq 0 ]; then
            echo "target_color=green" >> $GITHUB_OUTPUT
          else
            echo "target_color=blue" >> $GITHUB_OUTPUT
          fi

      # स्टेप 3: Terraform को सेट अप करना
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # स्टेप 4: Terraform कमांड्स चलाकर डिप्लॉय करना
      - name: Deploy to ${{ matrix.cloud }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # GCP के लिए भी ऐसे ही env वेरिएबल्स सेट होंगे
        run: |
          cd terraform/${{ matrix.cloud }}
          terraform init
          terraform apply -auto-approve \
            -var="env_color=${{ steps.bluegreen.outputs.target_color }}" \
            -var="docker_image_tag=${{ github.sha }}"